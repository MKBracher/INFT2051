package com.uon.myapp;

import static com.codename1.ui.CN.*;

import com.codename1.ui.*;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.spinner.Picker;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import java.util.Random;
import com.codename1.ui.layouts.BoxLayout;
import com.uon.myapp.CheckAnswer.CheckAnswer;
import com.uon.myapp.Displays.*;
import com.uon.myapp.QuestionPrepAndDisplay.PrepAnswers;
import com.uon.myapp.QuestionPrepAndDisplay.PrepQuestion;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class MyApplication {

    private Form current;
    private Resources theme;

    private Display dispRemainingTime;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if (err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });
    }

    public void start() {
        if (current != null) {
            current.show();
            return;
        }
        frmStart = new Form("", BoxLayout.y());

        startUp();

        frmStart.show();
    }

    public void stop() {
        current = getCurrentForm();
        if (current instanceof Dialog) {
            ((Dialog) current).dispose();
            current = getCurrentForm();
        }
    }

    public void destroy() {
    }

    public String sFrmTitle = "Math Wiz Quiz";

    String[] sDifficulty = {"Easy", "Normal", "Hard"};

    String[] sMode = {"Addition", "Subtraction", "Multiplication", "Division"};

    String[] sDisplays = {": Main Menu", ": Lobby"};

    String[] sDisplayTitle = {
            sFrmTitle + sDisplays[0],
            sFrmTitle + sDisplays[1]
    };

    private Picker pickerDifficulty;

    private Picker pickerMode;

    private Label lblTimeRemaining;

    // To keep track of score
    private static int iScore;
    Random randNumGen = new Random();

    // These integers can be used determine what range the randomised numbers could be
    // especially when determining the difficulty of the quiz
    int iMaxRange;
    int iMinRange;

    int i;

    // The number index for each math operation is randomised
    // But one of these options can be manually selected
    // 0 = Addition; 1 = Subtraction; 2 = Multiplication, 3 = Division
    // 4 = Square root; 5 = Exponentiation
    int iOperation;

    String sTimer = "20";

    public static void setScore(int score){
        iScore += score;
    }

    String sCurrentTime;

    static Form frmStart;


    public void startUp() {

        frmStart.removeAll();
        frmStart.setTitle(sDisplayTitle[0]);

//        Button btnPlay = new Button("Play Game");
//        frmStart.add(btnPlay);

        MainMenuContainer mainMenuContainer = new MainMenuContainer(BoxLayout.y());

        frmStart.add(mainMenuContainer);

        frmStart.show();

        //When clicked start the game
//        btnPlay.addActionListener((e) -> {
//            Lobby();
//        });
    }

    public void Lobby(){
        frmStart.removeAll();
        frmStart.setTitle(sDisplayTitle[1]);

        //Form frmLobby = new Form(sDisplayTitle[1], BoxLayout.y());

        LobbyContainer lobbyContainer = new LobbyContainer(BoxLayout.y(), sDifficulty, sMode);

        frmStart.add(lobbyContainer);

        frmStart.show();

        // Selecting Difficulty
//        pickerDifficulty = new Picker();
//        pickerDifficulty.setType(Display.PICKER_TYPE_STRINGS);
//        pickerDifficulty.setStrings(sDifficulty);
//        pickerDifficulty.setSelectedStringIndex(1);

//        // Selecting Mode
//        pickerMode = new Picker();
//        pickerMode.setType(Display.PICKER_TYPE_STRINGS);
//        pickerMode.setStrings(sMode);
//        pickerMode.setSelectedStringIndex(0);
//
//        // This button will start the game
//        Button btnPlayGame = new Button("Play Game");
//        btnPlayGame.addActionListener((e) -> {
//            int iSelDiff = pickerDifficulty.getSelectedStringIndex();
//            int iSelMode = pickerMode.getSelectedStringIndex();
//            playGame(iSelDiff, iSelMode);
//            TimeCountdown(sTimer);
//        });
//
//        // This button will return to the main menu
//        Button btnMainMenu = new Button("Main Menu");
//        btnMainMenu.addActionListener((e) -> startUp());
//
//        frmLobby.addAll(
//                new Label("Difficulty"),
//                pickerDifficulty,
//                new Label("Mode"),
//                pickerMode,
//                btnPlayGame,
//                btnMainMenu
//        );
//
//        frmLobby.show();
    }

    public void playGame(int iDifficulty, int iMode){

        frmStart.removeAll();

        String sChosenDiff = sDifficulty[iDifficulty];
        String sChosenMode = sMode[iMode];

        frmStart.setTitle(sFrmTitle + ": " + sChosenDiff + "; " + sChosenMode);

        GameContainer gameContainer = new GameContainer(BoxLayout.y(), iDifficulty, iMode);

        frmStart.add(gameContainer);

        frmStart.show();

        //Indicator for what difficulty is currently active
        //String formTitle;

        // How many numbers will be used for the equation
//        int iQuant;
//
//        if (iDifficulty == 0){
//            formTitle = "Quiz Wiz - Easy";
//            iQuant = 2;
//        }
//
//        else if (iDifficulty == 1){
//            formTitle = "Quiz Wiz - Normal";
//            iQuant = 2;
//        }
//
//        else {
//            formTitle = "Quiz Wiz - Hard";
//            iQuant = 2;
//        }

//        String sNewTimer = sTimer;
//
//        // Setting up the form to display the screen along with its required elements
//        Form frmGame = new Form(formTitle, BoxLayout.y());
//
//        // To prepare the question with how many numbers will be used
//        PrepQuestion prepQ = new PrepQuestion(iQuant, iOperation, iDifficulty);
//        int[] iRandNumbers = prepQ.collectRandNums();
//        String sDispQuestion = prepQ.displayQuestion(iRandNumbers);
//
//        // Displaying the question
//        frmGame.add(new Label(sDispQuestion));
//        //Displaying Score
//        frmGame.add(new Label("Score: " + (iScore)));
//
////        lblTimeRemaining = new Label(sTimer);
////        frmGame.add(lblTimeRemaining);
//
//        // Calculating the equation, creating the incorrect answers from the right answer,
//        // and shuffling the answers to make sure that the right answer is in a different place
//        PrepAnswers prepA = new PrepAnswers(iQuant, iOperation);
//        int iRightAnswer = prepA.equateRightAnswer(iRandNumbers);
//        int[] iWrongAnswers = prepA.createWrongAnswers(iRightAnswer);
//        int[] iShuffledAns = prepA.ShuffleAnswers(iWrongAnswers);
//
//        // Allocating the shuffled answers into the four option buttons
//        String[] sOpt = prepA.dispAnsSel(iShuffledAns);
//        Button[] btnOpt = new Button[sOpt.length];
//
//        for (i = 0; i < btnOpt.length; i++){
//            btnOpt[i] = new Button(sOpt[i]);
//            frmGame.add(btnOpt[i]);
//        }
//
//        // These lambda action listener event handlers
//        // will be used to check if the answer selected
//        // is either the right answer or the wrong answer
//        CheckAnswer chkAnswer = new CheckAnswer(iRightAnswer, iDifficulty, iOperation, sNewTimer);
//
//        // The number from the button's text will need to be collected
//        // to determine whether the answer selected is correct or not.
//        // The process is the same for the next three event handlers
//
//        btnOpt[0].addActionListener((e) -> { // Button A
//            String sOptAns = btnOpt[0].getText();
//            chkAnswer.checkAns(sOptAns);
//        });
//
//        btnOpt[1].addActionListener((e) -> { // Button B
//            String sOptAns = btnOpt[1].getText();
//            chkAnswer.checkAns(sOptAns);
//        });
//
//        btnOpt[2].addActionListener((e) -> { // Button C
//            String sOptAns = btnOpt[2].getText();
//            chkAnswer.checkAns(sOptAns);
//        });
//
//        btnOpt[3].addActionListener((e) -> { // Button D
//            String sOptAns = btnOpt[3].getText();
//            chkAnswer.checkAns(sOptAns);
//        });

        // Displaying the question
        //frmGame.show();
    }

    int iRemainingTime;

    int iNewRemainingTime;

    public void TimeCountdown(String sTimer){
        // Collect the time remaining
        iRemainingTime = Integer.parseInt(sTimer);

        // Commence a background thread
        new Thread(() -> {
            // The timer will countdown in n seconds
            // The following loop will countdown until it has reaches zero,
            // When the timer has reached zero, the game is over.
            for (i = iRemainingTime; i >= 0; i--){
                sCurrentTime = "" + i;

                // The timer will go down one unit of time for each second (1000 millis)
                lblTimeRemaining.setText(sCurrentTime);
                try {
                    Thread.sleep(700);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

                iNewRemainingTime = Integer.parseInt(sCurrentTime);
                //CheckTimeRemaining(iNewRemainingTime);


            }
        }).start();
    }

    public void CheckTimeRemaining(int iNewRemainingTime){
        if (iNewRemainingTime == 0){
            Dialog.show("Time's Up!", "Game over. Your time is up! Please try again.", "OK", null);
            Lobby();
        }

    }
}