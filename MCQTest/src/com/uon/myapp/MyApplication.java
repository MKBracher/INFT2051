package com.uon.myapp;


import static com.codename1.ui.CN.*;

import com.codename1.messaging.Message;
import com.codename1.ui.*;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;

import java.util.Date;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Handler;
import java.util.logging.LogRecord;


import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.events.ActionListener;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class MyApplication {

    private Form current;
    private Resources theme;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if (err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });
    }

    public void start() {
        if (current != null) {
            current.show();
            return;
        }
        startUp();
    }

    public void stop() {
        current = getCurrentForm();
        if (current instanceof Dialog) {
            ((Dialog) current).dispose();
            current = getCurrentForm();
        }
    }

    public void destroy() {
    }



    Random randNumGen = new Random();

    // This integers can be used determine what range the randomised numbers could be
    int iMaxRange;
    int iMinRange;


    // The number index for each math operation is randomised
    // But one of these options can be manually selected
    // 0 = Addition; 1 = Subtraction; 2 = Multiplication, 3 = Division
    int iOperation =   randNumGen.nextInt(4);


    public void startUp() {
        Form frmStart = new Form("Quiz Wiz", BoxLayout.y());
        Button btnPlay = new Button("Play Game");
        frmStart.add(btnPlay);

        //When clicked start the game
        btnPlay.addActionListener((e) -> {

            chooseDifficulty();
        });

        frmStart.show();


    }

    public void chooseDifficulty(){
        Form frmDifficulty = new Form("Quiz Wiz", BoxLayout.y());

        //adding buttons for selection of difficulty
        Button btnEasy = new Button("Easy");
        Button btnMed = new Button("Medium");
        Button btnHard = new Button("Hard");
        frmDifficulty.add(btnEasy);
        frmDifficulty.add(btnMed);
        frmDifficulty.add(btnHard);

        //run game on easy difficulty
        btnEasy.addActionListener((e) -> {
            playGame(0);
        });

        //run game on medium difficulty
        btnMed.addActionListener((e) -> {

            playGame(1);
        });

        //run game on hard difficulty
        btnHard.addActionListener((e) -> {
            playGame(2);
        });

        frmDifficulty.show();
    }

    public void playGame(int iDifficulty){
        //Indicator for what difficulty is currently active
        String formTitle;
        

        // How many numbers will be used for the equation
        int iQuant;

        if (iDifficulty == 0){
            formTitle = "Quiz Wiz - Easy";
            iQuant = 2;
        }

        else if (iDifficulty == 1){
            formTitle = "Quiz Wiz - Medium";
            iQuant = 2;
        }

        else {
            formTitle = "Quiz Wiz - Hard";
            iQuant = 3;
        }




        // Setting up the form to display the screen along with its required elements
        Form frmGame = new Form(formTitle, BoxLayout.y());



        // To prepare the question with how many numbers will be used
        PrepQuestion prepQ = new PrepQuestion(iQuant, iOperation);
        int[] iRandNumbers = prepQ.collectRandNums();
        String sDispQuestion = prepQ.displayQuestion(iRandNumbers);

        // Displaying the question
        frmGame.add(new Label(sDispQuestion));

        // Calculating the equation, creating the incorrect answers from the right answer,
        // and shuffling the answers to make sure that the right answer is in a different place
        PrepAnswers prepA = new PrepAnswers(iQuant, iOperation);
        int iRightAnswer = prepA.equateRightAnswer(iRandNumbers);
        int[] iWrongAnswers = prepA.createWrongAnswers(iRightAnswer);
        int[] iShuffledAns = prepA.ShuffleAnswers(iWrongAnswers);

        // Allocating the shuffled answers into the four option buttons
        String[] sOpt = prepA.dispAnsSel(iShuffledAns);
        Button btnOptA = new Button(sOpt[0]);
        Button btnOptB = new Button(sOpt[1]);
        Button btnOptC = new Button(sOpt[2]);
        Button btnOptD = new Button(sOpt[3]);
        frmGame.add(btnOptA);
        frmGame.add(btnOptB);
        frmGame.add(btnOptC);
        frmGame.add(btnOptD);

        // These lambda action listener event handlers
        // will be used to check if the answer selected
        // is either the right answer or the wrong answer
        CheckAnswer chkA = new CheckAnswer(iRightAnswer, iDifficulty);

        btnOptA.addActionListener((e) -> {
            // The number from the button's text will need to be collected
            // to determine whether the answer selected is correct or not.
            // The process is the same for the next three event handlers
            String sOptAns = btnOptA.getText();
            chkA.checkAns(sOptAns);
        });

        btnOptB.addActionListener((e) -> {
            String sOptAns = btnOptB.getText();
            chkA.checkAns(sOptAns);
        });

        btnOptC.addActionListener((e) -> {
            String sOptAns = btnOptC.getText();
            chkA.checkAns(sOptAns);
        });

        btnOptD.addActionListener((e) -> {
            String sOptAns = btnOptD.getText();
            chkA.checkAns(sOptAns);
        });



        frmGame.show();
    }




}