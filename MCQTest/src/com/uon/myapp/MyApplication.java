package com.uon.myapp;


import static com.codename1.ui.CN.*;

import com.codename1.ui.*;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import java.util.Random;

import com.codename1.ui.layouts.BoxLayout;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class MyApplication {

    private Form current;
    private Resources theme;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if (err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });
    }

    public void start() {
        if (current != null) {
            current.show();
            return;
        }
        startUp();
    }

    public void stop() {
        current = getCurrentForm();
        if (current instanceof Dialog) {
            ((Dialog) current).dispose();
            current = getCurrentForm();
        }
    }

    public void destroy() {
    }

    // How many numbers will be used for the equation
    int iQuant = 2;

    Random randNumGen = new Random();

    // This integers can be used determine what range the randomised numbers could be
    int iMaxRange;
    int iMinRange;

    // The number index for each math operation is randomised
    // But one of these options can be manually selected
    // 0 = Addition; 1 = Subtraction; 2 = Multiplication, 3 = Division
    int iOperation = randNumGen.nextInt(4);

    public void startUp() {
        // Setting up the form to display the screen along with its required elements
        Form frmAddition = new Form("Math Quiz Prototype", BoxLayout.y());

        // To prepare the question with how many numbers will be used
        PrepQuestion prepQ = new PrepQuestion(iQuant, iOperation);
        int[] iRandNumbers = prepQ.collectRandNums();
        String sDispQuestion = prepQ.displayQuestion(iRandNumbers);

        // Displaying the question
        frmAddition.add(new Label(sDispQuestion));

        // Calculating the equation, creating the incorrect answers from the right answer,
        // and shuffling the answers to make sure that the right answer is in a different place
        PrepAnswers prepA = new PrepAnswers(iQuant, iOperation);
        int iRightAnswer = prepA.equateRightAnswer(iRandNumbers);
        int[] iWrongAnswers = prepA.createWrongAnswers(iRightAnswer);
        int[] iShuffledAns = prepA.ShuffleAnswers(iWrongAnswers);

        // Allocating the shuffled answers into the four option buttons
        String[] sOpt = prepA.dispAnsSel(iShuffledAns);
        Button btnOptA = new Button(sOpt[0]);
        Button btnOptB = new Button(sOpt[1]);
        Button btnOptC = new Button(sOpt[2]);
        Button btnOptD = new Button(sOpt[3]);
        frmAddition.add(btnOptA);
        frmAddition.add(btnOptB);
        frmAddition.add(btnOptC);
        frmAddition.add(btnOptD);

        // These lambda action listener event handlers
        // will be used to check if the answer selected
        // is either the right answer or the wrong answer
        CheckAnswer chkA = new CheckAnswer(iRightAnswer);

        btnOptA.addActionListener((e) -> {
            // The number from the button's text will need to be collected
            // to determine whether the answer selected is correct or not.
            // The process is the same for the next three event handlers
            String sOptAns = btnOptA.getText();
            chkA.checkAns(sOptAns);
        });

        btnOptB.addActionListener((e) -> {
            String sOptAns = btnOptB.getText();
            chkA.checkAns(sOptAns);
        });

        btnOptC.addActionListener((e) -> {
            String sOptAns = btnOptC.getText();
            chkA.checkAns(sOptAns);
        });

        btnOptD.addActionListener((e) -> {
            String sOptAns = btnOptD.getText();
            chkA.checkAns(sOptAns);
        });

        frmAddition.show();
    }

}