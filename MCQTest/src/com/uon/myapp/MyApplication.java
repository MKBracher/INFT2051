package com.uon.myapp;

import static com.codename1.ui.CN.*;

import com.codename1.ui.*;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.spinner.Picker;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import java.util.Random;
import com.codename1.ui.layouts.BoxLayout;
import com.uon.myapp.CheckAnswer.CheckAnswer;
import com.uon.myapp.QuestionPrepAndDisplay.PrepAnswers;
import com.uon.myapp.QuestionPrepAndDisplay.PrepQuestion;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class MyApplication {

    private Form current;
    private Resources theme;

    private Display dispRemainingTime;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if (err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });
    }

    public void start() {
        if (current != null) {
            current.show();
            return;
        }
        startUp();
    }

    public void stop() {
        current = getCurrentForm();
        if (current instanceof Dialog) {
            ((Dialog) current).dispose();
            current = getCurrentForm();
        }
    }

    public void destroy() {
    }

    private Picker pickerDifficulty;

    private Picker pickerMode;

    private Label lblTimeRemaining;

    // To keep track of score
    private static int iScore;
    Random randNumGen = new Random();

    // These integers can be used determine what range the randomised numbers could be
    // especially when determining the difficulty of the quiz
    int iMaxRange;
    int iMinRange;

    int i;

    // The number index for each math operation is randomised
    // But one of these options can be manually selected
    // 0 = Addition; 1 = Subtraction; 2 = Multiplication, 3 = Division
    // 4 = Square root; 5 = Exponentiation
    int iOperation;

    String sTimer = "20";

    public static void setScore(int score){
        iScore += score;
    }

    String sCurrentTime;


    public void startUp() {
        Form frmStart = new Form("Quiz Wiz", BoxLayout.y());
        Button btnPlay = new Button("Play Game");
        frmStart.add(btnPlay);

        //When clicked start the game
        btnPlay.addActionListener((e) -> {
            Lobby();
        });

        frmStart.show();
    }

    public void Lobby(){
        Form frmLobby = new Form("Quiz Wiz", BoxLayout.y());

        String[] sDifficulty = {"Easy", "Normal", "Hard"};

        String[] sMode = {"Addition", "Subtraction", "Multiplication", "Division"};

        // Selecting Difficulty
        pickerDifficulty = new Picker();
        pickerDifficulty.setType(Display.PICKER_TYPE_STRINGS);
        pickerDifficulty.setStrings(sDifficulty);
        pickerDifficulty.setSelectedString("Normal");

        // Selecting Mode
        pickerMode = new Picker();
        pickerMode.setType(Display.PICKER_TYPE_STRINGS);
        pickerMode.setStrings(sMode);
        pickerMode.setSelectedString("Addition");

        // This button will start the game
        Button btnPlayGame = new Button("Play Game");
        btnPlayGame.addActionListener((e) -> {
            int iSelDiff = pickerDifficulty.getSelectedStringIndex();
            int iSelMode = pickerMode.getSelectedStringIndex();
            playGame(iSelDiff, iSelMode);
            TimeCountdown(sTimer);
        });

        // This button will reset the selections made
        Button btnReset = new Button("Reset");
        btnReset.addActionListener((e) -> {
            pickerDifficulty.setSelectedStringIndex(1);
            pickerMode.setSelectedStringIndex(0);
        });

        // This button will return to the main menu
        Button btnMainMenu = new Button("Main Menu");
        btnMainMenu.addActionListener((e) -> startUp());

        frmLobby.addAll(
                new Label("Difficulty"),
                pickerDifficulty,
                new Label("Mode"),
                pickerMode,
                btnPlayGame,
                btnReset,
                btnMainMenu
        );

        frmLobby.show();
    }

    public void playGame(int iDifficulty, int iOperation){

        //Indicator for what difficulty is currently active
        String formTitle;

        // How many numbers will be used for the equation
        int iQuant;

        if (iDifficulty == 0){
            formTitle = "Quiz Wiz - Easy";
            iQuant = 2;
        }

        else if (iDifficulty == 1){
            formTitle = "Quiz Wiz - Normal";
            iQuant = 2;
        }

        else {
            formTitle = "Quiz Wiz - Hard";
            iQuant = 2;
        }

        // Setting up the form to display the screen along with its required elements
        Form frmGame = new Form(formTitle, BoxLayout.y());

        // To prepare the question with how many numbers will be used
        PrepQuestion prepQ = new PrepQuestion(iQuant, iOperation, iDifficulty);
        int[] iRandNumbers = prepQ.collectRandNums();
        String sDispQuestion = prepQ.displayQuestion(iRandNumbers);

        // Displaying the question
        frmGame.add(new Label(sDispQuestion));
        //Displaying Score
        frmGame.add(new Label("Score: " + (iScore)));

        lblTimeRemaining = new Label(sTimer);
        frmGame.add(lblTimeRemaining);

        // Calculating the equation, creating the incorrect answers from the right answer,
        // and shuffling the answers to make sure that the right answer is in a different place
        PrepAnswers prepA = new PrepAnswers(iQuant, iOperation);
        int iRightAnswer = prepA.equateRightAnswer(iRandNumbers);
        int[] iWrongAnswers = prepA.createWrongAnswers(iRightAnswer);
        int[] iShuffledAns = prepA.ShuffleAnswers(iWrongAnswers);

        // Allocating the shuffled answers into the four option buttons
        String[] sOpt = prepA.dispAnsSel(iShuffledAns);
        Button btnOptA = new Button(sOpt[0]);
        Button btnOptB = new Button(sOpt[1]);
        Button btnOptC = new Button(sOpt[2]);
        Button btnOptD = new Button(sOpt[3]);
        frmGame.add(btnOptA);
        frmGame.add(btnOptB);
        frmGame.add(btnOptC);
        frmGame.add(btnOptD);

        // These lambda action listener event handlers
        // will be used to check if the answer selected
        // is either the right answer or the wrong answer
        CheckAnswer chkAnswer = new CheckAnswer(iRightAnswer, iDifficulty, iOperation);

        String sNewTimer = "300";

        // The number from the button's text will need to be collected
        // to determine whether the answer selected is correct or not.
        // The process is the same for the next three event handlers
        btnOptA.addActionListener((e) -> {
            String sOptAns = btnOptA.getText();
            chkAnswer.checkAns(sOptAns);
        });

        btnOptB.addActionListener((e) -> {
            String sOptAns = btnOptB.getText();
            chkAnswer.checkAns(sOptAns);
        });

        btnOptC.addActionListener((e) -> {
            String sOptAns = btnOptC.getText();
            chkAnswer.checkAns(sOptAns);
        });

        btnOptD.addActionListener((e) -> {
            String sOptAns = btnOptD.getText();
            chkAnswer.checkAns(sOptAns);
        });

        // Displaying the question
        frmGame.show();
    }

    int iRemainingTime;

    public void TimeCountdown(String sTimer){
        // Collect the time remaining
        iRemainingTime = Integer.parseInt(sTimer);

            // Commence a background thread
        new Thread(() -> {
            // The timer will countdown in n seconds
            // The following loop will countdown until it has reaches zero,
            // When the timer has reached zero, the game is over.
            for (i = iRemainingTime; i >= 0; i--){
                sCurrentTime = "" + i;

                // The timer will go down one unit of time for each second (1000 millis)
                try {
                    if (i == 0){
                        Dialog.show("Time's Up!", "Game over. Your time is up! Please try again.", "OK", null);
                        Lobby();
                    }
                    else{
                        lblTimeRemaining.setText(sCurrentTime);
                        Thread.sleep(500);
                    }


                } catch (InterruptedException ex) { }

            }
        }).start();

    }
}